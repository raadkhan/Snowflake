<?xml version="1.0"?>
<!--
    A Useful set of macros, mostly for generating model parts
-->
<robot name="robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

<xacro:macro name="cylinder_inertia" params="m r h">
  <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
    iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
    izz="${m*r*r/2}"
  />
</xacro:macro>

<xacro:macro name="box_inertia" params="m x y z">
  <inertia  ixx="${m*(y*y+z*z)/12}" ixy = "0" ixz = "0"
    iyy="${m*(x*x+z*z)/12}" iyz = "0"
    izz="${m*(x*x+z*z)/12}"
  />
</xacro:macro>

<xacro:macro name="sphere_inertia" params="m r">
  <inertia  ixx="${2*m*r*r/5}" ixy = "0" ixz = "0"
    iyy="${2*m*r*r/5}" iyz = "0"
    izz="${2*m*r*r/5}"
  />
</xacro:macro>


<!-- Macro to generate wheels -->
<xacro:macro name="wheel" params="lr tY wheel_displacement fb">

<link name="${lr}_${fb}_wheel">
  <collision>
    <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}" />
    <geometry>
      <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
    </geometry>
  </collision>

  <visual>
    <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}" />
    <geometry>
      <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
    </geometry>
    <material name="black"/>
  </visual>

  <inertial>
    <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}" />
    <mass value="${wheel_mass}"/>
    <cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
  </inertial>
</link>

<gazebo reference="${lr}_${fb}_wheel">
  <mu1 value="10.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="1 0 0"/>
  <material>Gazebo/Black</material>
</gazebo>


<joint name="${lr}_${fb}_wheel_hinge" type="continuous">
  <parent link="chassis"/>
  <child link="${lr}_${fb}_wheel"/>
  <origin xyz="${wheel_displacement} ${tY*wheel_width/2+tY*chassis_width/2} ${wheel_radius}" rpy="0 0 0" />
  <axis xyz="0 1 0" rpy="0 0 0" />
  <limit effort="100" velocity="100"/>
  <joint_properties damping="0.0" friction="0.0"/>
  <hardwareInterface>EffortJointInterface</hardwareInterface>
</joint>


<transmission name="${lr}_${fb}_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="${lr}_${fb}_wheel_hinge">
    <hardwareInterface>EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="${lr}_${fb}_Motor">
    <hardwareInterface>EffortJointInterface</hardwareInterface>
    <mechanicalReduction>10</mechanicalReduction>
  </actuator>
</transmission>
</xacro:macro>

<!-- Macro to generate caster wheels -->
<xacro:macro name="caster_wheel" params="lr tY wheel_displacement fb caster_radius:=${wheel_radius}">
    
<link name="${lr}_${fb}_caster_wheel">
  <collision>
    <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}" />
    <geometry>
      <sphere radius="${caster_radius}"/>
    </geometry>
    <surface>
      <friction>
        <ode>
          <mu>0</mu>
          <mu2>0</mu2>
          <slip1>1</slip1>
          <slip2>1</slip2>
        </ode>
      </friction>
    </surface>
  </collision>

  <visual>
    <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}" />
    <geometry>
      <sphere radius="${caster_radius}"/>
    </geometry>
    <material name="black"/>
  </visual>

  <inertial>
    <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}" />
    <mass value="0"/>
    <sphere_inertia m="0" r="0"/>
  </inertial>
</link>

<gazebo reference="${lr}_${fb}_caster_wheel">
  <mu1 value="0.0"/>
  <mu2 value="0.0"/>
  <material>Gazebo/Black</material>
</gazebo>

<!--
<joint name="${lr}_${fb}_wheel_hinge" type="continuous">
  <parent link="chassis"/>
  <child link="${lr}_${fb}_wheel"/>
  <origin xyz="${wheel_displacement} ${-tY*wheel_width+tY*chassis_width/2} ${caster_radius}" rpy="0 0 0" />
  <axis xyz="0 1 0" rpy="0 0 0" />
  <limit effort="100" velocity="100"/>
  <joint_properties damping="0.0" friction="0.0"/>
  <hardwareInterface>EffortJointInterface</hardwareInterface>
</joint>
-->

<joint name="${lr}_${fb}_wheel_hinge" type="fixed">
  <parent link="chassis"/>
  <child link="${lr}_${fb}_caster_wheel"/>
  <origin xyz="${wheel_displacement} ${-tY*caster_radius+tY*chassis_width/2} ${caster_radius}" rpy="0 0 0" />
</joint>

</xacro:macro>

<!-- Macro to generate vertical tower uprights -->
<xacro:macro name="tower_vert" params="lr tX:=-1 tY">

<joint name="${lr}_tower_joint" type="fixed">
  <parent link="chassis"/>
  <child link="tower_${lr}"/>
  <origin xyz="${tX * ((chassis_length/2) - (tower_thickness/2))} ${tY * ((chassis_width/2) - (tower_thickness/2))} ${chassis_height + chassis_elevation + (tower_height/2)}" rpy="0 0 0"/> 
</joint>

<link name='tower_${lr}'>

<collision>
    <origin xyz="0 0 0" rpy="0 0 0"/> 
    <geometry>
        <box size="${tower_thickness} ${tower_thickness} ${tower_height}"/>
    </geometry>
</collision>

<visual>
    <origin xyz="0 0 0" rpy="0 0 0"/> 
    <geometry>
        <box size="${tower_thickness} ${tower_thickness} ${tower_height}"/>
    </geometry>
    <material name="orange"/>
</visual>

<inertial>
    <origin xyz="0 0 0" rpy="0 0 0"/> 
    <mass value="${tower_mass}"/>
    <box_inertia m="${tower_mass}" x="${tower_thickness}" y="${tower_thickness}" z="${tower_height}"/>
</inertial>

</link>
</xacro:macro>

</robot>
